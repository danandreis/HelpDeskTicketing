@using HelpDeskTicketing.Data.ViewModels;
@model TicketVM;

@{

    ViewData["Title"] = "Ticket details"; 

}

<div class="row" style="margin-top:75px;">
    <div class="col-md-8 offset-2 fw-bold text-center">
        <h2 class="fw-bold"> Ticket details </h2>
    </div>
  
    <div class="col-md-8 offset-2" style="margin-top:50px;">
        <table class="table">
            <tbody>
                <tr>
                    <td>Open date:</td>
                    <td class="fw-bold">@Model.StartDate.ToString("dd.MM.yyyy hh:mm tt")</td>
                    <td>Title : </td>
                    <td class="fw-bold"> @Model.Title</td>
                    <td>Assigned to: </td>
                        @foreach(var user in Model.TicketUsers)
                        {

                            if (user.UserRole.Equals("SystemAdmin"))
                            {

                                <td class="fw-bold">  @user.AppUser.FullName;</td>
                            }
                            else
                            {

                                <td class="fw-bold">Not assigned!</td>
                            }
                        }
                </tr>
                <tr>
                    <td>Priority: </td>
                        <td>
                            @switch (@Model.Priority.Name)
                            {

                                case "Low":

                                    <div class="priority-badge" style="background-color:grey;">
                                        @Html.DisplayFor(t=>@Model.Priority.Name)
                                    </div>
                                    break;

                                case "High":

                                    <div class="priority-badge" style="background-color:#F6804C;">
                                        @Html.DisplayFor(t=>@Model.Priority.Name)
                                    </div>
                                    break;

                                case "Critical":

                                    <div class="priority-badge" style="background-color:red;">
                                        @Html.DisplayFor(t=>@Model.Priority.Name)
                                    </div>
                                    break;

                            }
                        </td>
                    <td>Status : </td>
                        <td>
                            @switch (@Model.Status.Name)
                            {

                                case "Open":

                                    <div class="status-badge" style="background-color:cornflowerblue;">
                                        @Html.DisplayFor(t=>Model.Status.Name)
                                    </div>

                                    break;

                                case "Assigned":

                                    <div class="status-badge" style="background-color: lawngreen;">
                                        @Html.DisplayFor(t=>Model.Status.Name)
                                    </div>

                                    break;

                                case "Closed":

                                    <div class="status-badge" style="background-color: dimgrey;">
                                        @Html.DisplayFor(t=>Model.Status.Name)
                                    </div>

                                    break;

                            }
                        </td>
                    <td>Close date: </td>

                    @if(Model.EndDate != null)
                    {
                        
                        <td class="fw-bold" > @Model.EndDate?.ToString("dd.MM.yyyy hh:mm tt");</td>
                    }
                    else
                    {
                        
                        <td>- </td>
                    }

                </tr>
            </tbody>
        </table>
            
        @await Html.PartialAsync("NewMessage",Model.TicketMessage)

        @await Html.PartialAsync("MessagesList",Model.Messages) 

    </div>
</div>
